const LIVECODE_FILES = [{"filename": "start.py", "contents": "\nfrom joy import *\n\ndef show(*shapes):\n    def hline(y, **kwargs):\n        return line(x1=-150, y1=y, x2=150, y2=y, stroke=\"#ddd\", **kwargs)\n\n    def vline(x, **kwargs):\n        return line(x1=x, y1=-150, x2=x, y2=150, stroke=\"#ddd\", **kwargs)\n\n    markers = [\n        hline(50), hline(100), hline(150),\n        hline(-50), hline(-100), hline(-150),\n        vline(50), vline(100), vline(150),\n        vline(-50), vline(-100), vline(-150),\n        hline(0, stroke_width=2), vline(0, stroke_width=2)\n    ]\n    for s in shapes:\n        if not isinstance(s, Shape):\n            print(f\"show: {s} is not a shape\")\n    shapes = markers + [s for s in shapes if isinstance(s, Shape)]\n    img = SVG(shapes)\n    sendmsg(\"image\", image=img.render())\n\nenv = dict(globals())\n\nimport os\nimport json\ndef sendmsg(msgtype, **kwargs):\n  \"\"\"Sends a message to the frontend.\n\n  The frontend will receive the specified message whenever\n  this function is called. The frontend can decide to some\n  action on each of these messages.\n  \"\"\"\n  msg = dict(msgtype=msgtype, **kwargs)\n  print(\"--MSG--\", json.dumps(msg))\n\n# legacy mode: support legacy sketches\nis_sketch = os.getenv(\"SKETCH\")\nif is_sketch:\n    exec(\"from sketch import circle, get_shape\", env)\n\ncode = open(\"main.py\").read()\nexec(code, env)\n\n# legacy mode: draw the shapes created so far\nif is_sketch:\n    exec(\"show(get_shape())\", env)\n"}, {"filename": "joy.py", "contents": "\"\"\"\nJoy\n===\n\nJoy is a tiny creative coding library in Python.\n\nBASIC USAGE\n\nAn example of using joy:\n\n    >>> from joy import *\n    >>>\n    >>> c = Circle(center=Point(x=100, y=100), radius=50)\n    >>> show(c)\n\nThe `cicle` function creates a new circle and the `show` function\ndisplys it.\n\nPRINCIPLES\n\nJoy follows functional programming approach for it's interface. Each\nfunction/class gives a shape and those shapes can be transformed and\ncombined using other utililty functions.\n\nBy design, there is no global state in the library.\n\nJoy uses SVG to render the shapes and the shapes are really a very thin\nwrapper over SVG nodes. It is possible to use every functionality of SVG,\neven if that is not exposed in the API.\n\nCOORDINATE SYSTEM\n\nJoy uses a canvas with (0, 0) as the center of the canvas.\n\nBy default the size of the canvas is (300, 300).\n\nBASIC SHAPES\n\nJoy supports `Circle`, `Rect` and `Line` as basic shapes.\n\n    >>> c = Circle(center=Point(x=100, y=100), radius=50)\n    >>> r = Rectangle(center=Point(0, 0), width=200, height=200)\n    >>> show(c, r)\n\nAll basic shapes have default values of all the arguments, making it\neasier to start using them.\n\n    >>> c = Circle()\n    >>> r = Rectangle()\n    >>> z = Line()\n    >>> show(c, r, z)\n\nCOMBINING SHAPES\n\nThe `combine` function is used to combine multiple shapes into a\nsingle shape.\n\n    >>> shape = combine(Circle(), Rect())\n    >>> show(shape)\n\nTRANSFORMATIONS\n\nJoy supports `Translate`, `Rotate` and `Scale` transformations.\n\nThe `Translate` transformation moves the given shape by `x` and `y`.\n\n    >>> c1 = Circle(radius=50)\n    >>> c2 = c1 | Translate(x=100, y=0)\n    >>> show(c1, c2)\n\nAs you've seen the above example, transformations are applied using\nthe `|` operator.\n\nThe `Rotate` transformation rotates a shape clockwise by the specified\nangle.\n\n    >>> shape = Rectangle() | Rotate(angle=45)\n    >>> show(shape)\n\nBy default the `rotate` function rotates the shape around the origin.\nHowever, it is also possible to specify the anchor point for rotation.\n\n    >>> shape = Rectangle() | Rotate(angle=45, anchor=Point(x=100, y=100))\n    >>> show(shape)\n\nThe `Scale` transformation scales a shape.\n\n    >>> shape = Circle() | Scale(sx=1, sy=0.5)\n    >>> show(shape)\n\nHIGER ORDER TRANSFORMATIONS\n\nJoy supports a transorm called `Cycle` to rotate a shape multiple times\nwith angle from 0 to 360 degrees and combining all the resulting shapes.\n\n    >>> flower = Rectangle() | Cycle()\n    >>> show(flower)\n\nBy default, `Cycle` repeats the rotation for `18` times, however that can be\ncustomizing by specifying the parameter `n`.\n\n    >>> shape = rect() | Cycle(n=3)\n    >>> show(shape)\n\nJUPYTER LAB INTEGRATION\n\nJoy integrates very well with Jupyter notebooks and every shape is\nrepresented as SVG image by jupyter.\n\"\"\"\nimport html\n\n__version__ = \"0.2.3\"\n__author__ = \"Anand Chitipothu <anand@fossunited.org>\"\n\nSQRT2 = 2**0.5\n\nclass Shape:\n    \"\"\"Shape is the base class for all shapes in Joy.\n\n    A Shape is an SVG node and supports converting it self into svg text.\n\n    Typically, users do not interact with this class directly, but use it\n    through it's subclasses.\n    \"\"\"\n    def __init__(self, tag, children=None, transform=None, **attrs):\n        \"\"\"Creates a new shape.\n        \"\"\"\n        self.tag = tag\n        self.children = children\n        self.attrs = attrs\n        self.transform = None\n\n    def __repr__(self):\n        return f\"<{self.tag} {self.attrs}>\"\n\n    def __getattr__(self, name):\n        if not name.startswith(\"_\") and name in self.attrs:\n            return self.attrs[name]\n        else:\n            raise AttributeError(name)\n\n    def apply_transform(self, transform):\n        if self.transform is not None:\n            transform = self.transform | transform\n\n        shape = self.clone()\n        shape.transform = transform\n        return shape\n\n    def clone(self):\n        shape = object.__new__(self.__class__)\n        shape.__dict__.update(self.__dict__)\n        return shape\n\n    def get_attrs(self):\n        attrs = dict(self.attrs)\n        if self.transform:\n            attrs['transform'] = self.transform.as_str()\n        return attrs\n\n    def _svg(self, indent=\"\") -> str:\n        \"\"\"Returns the svg representation of this node.\n\n        This method is used to recursively construct the svg of a node\n        and it's children.\n\n            >>> c = Shape(tag='circle', cx=100, cy=100, r=50)\n            >>> c._svg()\n            '<circle cx=\"100\" cy=\"100\" r=\"50\" />'\n        \"\"\"\n        attrs = self.get_attrs()\n        if self.children:\n            tag_text = render_tag(self.tag, **attrs, close=False)\n            return (\n                indent + tag_text + \"\\n\" +\n                \"\".join(c._svg(indent + \"  \") for c in self.children) +\n                indent + \"</\" + self.tag + \">\\n\"\n            )\n        else:\n            tag_text = render_tag(self.tag, **attrs, close=True)\n            return indent + tag_text + \"\\n\"\n\n    def as_svg(self, width=300, height=300) -> str:\n        \"\"\"Renders this node as svg image.\n\n        The svg image is assumed to be of size (300, 300) unless the\n        width and the height arguments are provided.\n\n        Example:\n\n            >>> c = Shape(tag='circle', cx=100, cy=100, r=50)\n            >>> print(c.as_svg())\n            <svg width=\"300\" height=\"300\" viewBox=\"-150 -150 300 350\" fill=\"none\" stroke=\"black\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"100\" cy=\"100\" r=\"50\" />\n            </svg>\n        \"\"\"\n        return SVG([self], width=width, height=height).render()\n\n    def __add__(self, shape):\n        if not isinstance(shape, Shape):\n            return NotImplemented\n        return Group([self, shape])\n\n    def _repr_svg_(self):\n        \"\"\"Returns the svg representation of this node.\n\n        This method is called by Juputer to render this object as an\n        svg image.\n        \"\"\"\n        return self.as_svg()\n\nclass SVG:\n    \"\"\"SVG renders any svg element into an svg image.\n    \"\"\"\n    def __init__(self, nodes, width=300, height=300):\n        self.nodes = nodes\n        self.width = width\n        self.height = height\n\n    def render(self):\n        svg_header = render_tag(\n            tag=\"svg\",\n            width=self.width,\n            height=self.height,\n            viewBox=f\"-{self.width//2} -{self.height//2} {self.width} {self.height}\",\n            fill=\"none\",\n            stroke=\"black\",\n            xmlns=\"http://www.w3.org/2000/svg\") + \"\\n\"\n        svg_footer = \"</svg>\\n\"\n\n        # flip the y axis so that y grows upwards\n        node = Group(self.nodes) | Scale(sx=1, sy=-1)\n\n        return svg_header + node._svg() + svg_footer\n\n    def _repr_svg_(self):\n        return self.render()\n\n    def __str__(self):\n        return self.render()\n\n    def __repr__(self):\n        return \"SVG:{self.nodes}\"\n\nclass Point:\n    \"\"\"Creates a new Point.\n\n    Point represents a point in the coordinate space and it contains\n    attributes x and y.\n\n        >>> p = Point(x=100, y=50)\n    \"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, p):\n        return isinstance(p, Point) \\\n            and p.x == self.x \\\n            and p.y == self.y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\nclass Circle(Shape):\n    \"\"\"Creates a circle shape.\n\n    Parameters:\n        center:\n            The center point of the circle.\n            Defaults to Point(0, 0) when not specified.\n\n        radius:\n            The radius of the circle.\n            Defaults to 100 when not specified.\n\n    Examples:\n\n    Draw a circle.\n\n        >>> c = Circle()\n        >>> show(c)\n\n    Draw a Circle with radius 50.\n\n        >>> c = Circle(radius=50)\n        >>> show(c)\n\n    Draw a circle with center at (100, 100) and radius as 50.\n\n        >>> c = Circle(center=Point(x=100, y=100), radius=50)\n        >>> show(c)\n\n    When no arguments are specified, it uses (0, 0) as the center and\n    100 as the radius.\n    \"\"\"\n    def __init__(self, center=Point(0, 0), radius=100, **kwargs):\n        self.center = center\n        self.radius = radius\n\n        cx, cy = self.center.x, self.center.y\n        super().__init__(\"circle\",\n            cx=cx,\n            cy=cy,\n            r=self.radius,\n            **kwargs)\n\nclass Ellipse(Shape):\n    \"\"\"Creates an ellipse shape.\n\n    Parameters:\n        center:\n            The center point of the ellipse. Defaults to (0, 0) when\n            not specified.\n\n        width:\n            The width of the ellipse. Defaults to 100 when not\n            specified.\n\n        height:\n            The height of the ellipse. Defaults to 100 when not\n            specified.\n\n    Examples:\n\n    Draw a ellipse with center at origin and width of 200 and height of 100:\n\n        >>> r = Ellipse()\n        >>> show(r)\n\n    Draw a ellipse having a width of 100 and a height of 50.\n\n        >>> r = Ellipse(width=100, height=50)\n        >>> show(r)\n\n    Draw a ellipse centered at (100, 100) and with a width\n    of 200 and height of 100.\n\n        >>> r = Ellipse(center=Point(x=100, y=100), width=200, height=100)\n        >>> show(r)\n    \"\"\"\n    def __init__(self, center=Point(0, 0), width=200, height=100, **kwargs):\n        self.center = center\n        self.width = width\n        self.height = height\n\n        cx, cy = self.center.x, self.center.y\n        rx = width/2\n        ry = height/2\n        super().__init__(\n            tag=\"ellipse\",\n            cx=cx,\n            cy=cy,\n            rx=rx,\n            ry=ry,\n            **kwargs)\n\nclass Rectangle(Shape):\n    \"\"\"Creates a rectangle shape.\n\n    Parameters:\n        center:\n            The center point of the rectangle. Defaults to (0, 0) when\n            not specified.\n\n        width:\n            The width of the rectangle. Defaults to 200 when not\n            specified.\n\n        height:\n            The height of the rectangle. Defaults to 100 when not\n            specified.\n\n    Examples:\n\n    Draw a rectangle:\n\n        >>> r = Rectangle()\n        >>> show(r)\n\n    Draw a square.\n\n        >>> r = Rectangle(width=200, height=200)\n        >>> show(r)\n\n    Draw a rectangle centered at (100, 100) and with a width\n    of 200 and height of 100.\n\n        >>> r = Rectangle(center=Point(x=100, y=100), width=200, height=100)\n        >>> show(r)\n    \"\"\"\n    def __init__(self, center=Point(0, 0), width=200, height=100, **kwargs):\n        self.center = center\n        self.width = width\n        self.height = height\n\n        cx, cy = self.center.x, self.center.y\n        x = cx - width/2\n        y = cy - height/2\n        super().__init__(\n            tag=\"rect\",\n            x=x,\n            y=y,\n            width=width,\n            height=height,\n            **kwargs)\n\nclass Line(Shape):\n    \"\"\"Basic shape for drawing a line connecting two points.\n\n    Parameters:\n        start:\n            The starting point of the line. Defaults to (-100, 0) when\n            not specified.\n\n        end:\n            The ending point of the line. Defaults to (100, 0) when not\n            specified.\n\n    Examples:\n\n    Draw a line:\n\n        >>> z = line()\n        >>> show(z)\n\n    Draw a line from (0, 0) to (100, 50).\n\n        >>> z = line(start=Point(x=0, y=0), end=Point(x=100, y=50))\n        >>> show(z)\n    \"\"\"\n    def __init__(self, start=Point(-100, 0), end=Point(100, 0), **kwargs):\n        self.start = start\n        self.end = end\n\n        x1, y1 = self.start.x, self.start.y\n        x2, y2 = self.end.x, self.end.y\n\n        super().__init__(\"line\", x1=x1, y1=y1, x2=x2, y2=y2, **kwargs)\n\nclass Group(Shape):\n    \"\"\"Creates a container to group a list of shapes.\n\n    This class is not meant for direct consumption of the users. Users\n    are recommended to use `combine` to combine multiple shapes and use\n    `translate`, `rotate` and `scale` for doing transformations.\n\n    This creates an svg <g> element.\n\n    Parameters:\n        shapes:\n            The list of shapes to group.\n\n    Examples:\n\n    Combine a circle and a rectangle.\n\n        >> c = Circle()\n        >> r = Rectangle()\n        >>> shape = Group([c, r])\n        >>> show(shape)\n\n    Shapes can also be combined using the + operator and that creates\n    a group implicitly.\n\n        >>> shape = Circle() + Rectangle()\n        >>> show(shape)\n    \"\"\"\n    def __init__(self, shapes, **kwargs):\n        super().__init__(\"g\", children=shapes, **kwargs)\n\ndef render_tag(tag, *, close=False, **attrs):\n    \"\"\"Renders a html/svg tag.\n\n        >>> render_tag(\"circle\", cx=0, cy=0, r=10)\n        '<circle cx=\"0\" cy=\"0\" r=\"10\">'\n\n    When `close=True`, the tag is closed with \"/>\".\n\n        >>> render_tag(\"circle\", cx=0, cy=0, r=10, close=True)\n        '<circle cx=\"0\" cy=\"0\" r=\"10\" />'\n\n    Underscore characters in the attribute name are replaced with hypens.\n\n        >>> render_tag(\"circle\", cx=0, cy=0, r=10, stroke_width=2)\n        '<circle cx=\"0\" cy=\"0\" r=\"10\" stroke-width=\"2\">'\n    \"\"\"\n    end = \" />\" if close else \">\"\n\n    if attrs:\n        items = [(k.replace(\"_\", \"-\"), html.escape(str(v))) for k, v in attrs.items() if v is not None]\n        attrs_text = \" \".join(f'{k}=\"{v}\"' for k, v in items)\n\n        return f\"<{tag} {attrs_text}{end}\"\n    else:\n        return f\"<{tag}{end}\"\n\ndef combine(*shapes):\n    \"\"\"Combines multiple shapes in to a single shape by overlaying all\n    the shapes.\n\n        >>> shape = combine(circle(), rect())\n        >>> show(shape)\n    \"\"\"\n    return Group(shapes)\n\nclass Transformation:\n    def apply(self, shape):\n        return shape.apply_transform(self)\n\n    def join(self, transformation):\n        return TransformationList([self, transformation])\n\n    def __or__(self, right):\n        if not isinstance(right, Transformation):\n            return NotImplemented\n        return self.join(transformation=right)\n\n    def __ror__(self, left):\n        if not isinstance(left, Shape):\n            return NotImplemented\n        return self.apply(shape=left)\n\nclass TransformationList(Transformation):\n    def __init__(self, transformations):\n        self.transformations = transformations\n\n    def join(self, transformation):\n        return TransformationList(self.transformations + [transformation])\n\n    def as_str(self):\n        # Reversing the transformations as SVG applies them in the\n        # reverse order (the right most is appled first)\n        return \" \".join(t.as_str() for t in self.transformations[::-1])\n\nclass Translate(Transformation):\n    \"\"\"Creates a new Translate transformation that moves a shape by\n    x and y when applied.\n\n    Parameters:\n        x:\n            The number of units to move in the x direction\n\n        y:\n            The number of units to move in the y direction\n\n    Example:\n\n    Translate a circle by (100, 50).\n\n        >>> c = Circle() | Translate(100, 50)\n        >>> show(c)\n    \"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def as_str(self):\n        return f\"translate({self.x} {self.y})\"\n\nclass Rotate(Transformation):\n    \"\"\"Creates a new rotate transformation.\n\n    When applied to a shape, it rotates the given shape by angle, around\n    the anchor point.\n\n    Parameters:\n\n        angle:\n            The angle to rotate the shape in degrees.\n\n        anchor:\n            The andhor point around which the rotation is performed.\n\n    Examples:\n\n    Rotates a square by 45 degrees.\n\n        >>> shape = Rectangle() | Rotate(angle=45)\n        >>> show(shape)\n\n    Rotate a rectangle around it's top-left corner and\n    combine with it self.\n\n        >>> r1 = Rectangle()\n        >>> r2 = r1 | Rotate(angle=45, anchor=(r.point[0]))\n        >>> shape = combine(r1, r2)\n        >>> show(shape)\n    \"\"\"\n    def __init__(self, angle, anchor=Point(0, 0)):\n        self.angle = angle\n        self.anchor = anchor\n\n    def as_str(self):\n        origin = Point(0, 0)\n        if self.anchor == origin:\n            return f\"rotate({self.angle})\"\n        else:\n            return f\"rotate({self.angle} {self.anchor.x} {self.anchor.y})\"\n\nclass Scale(Transformation):\n    \"\"\"Creates a new scale transformation.\n\n    Parameters:\n        sx:\n            The scale factor in the x direction.\n\n        sy:\n            The scale factor in the y direction. Defaults to\n            the value of sx if not provided.\n    \"\"\"\n    def __init__(self, sx, sy=None):\n        if sy is None:\n            sy = sx\n        self.sx = sx\n        self.sy = sy\n\n    def as_str(self):\n        return f\"scale({self.sx} {self.sy})\"\n\nclass Repeat(Transformation):\n    \"\"\"Repeat is a higher-order transformation that repeats a\n    transformation multiple times.\n\n    Parameters:\n        n:\n            The number of times to rotate. This also determines the\n            angle of each rotation, which will be 360/n.\n\n        transformation:\n            The transfomation to apply repeatedly.\n\n    Examples:\n\n    Draw three circles:\n\n        >>> shape = Circle(radius=25) | Repeat(4, Translate(x=50, y=0))\n        >>> show(shape)\n\n    Rotate a line multiple times:\n\n        >>> shape = Line() | Repeat(36, Rotate(angle=10))\n        >>> show(shape)\n\n    Rotate and shrink a line multiple times:\n\n        >>> shape = Line() | Repeat(18, Rotate(angle=10) | Scale(sx=0.9))\n        >>> show(shape)\n    \"\"\"\n    def __init__(self, n, transformation):\n        self.n = n\n        self.transformation = transformation\n\n    def apply(self, shape):\n        shapes = [shape]\n        for i in range(self.n-1):\n            shape = self.transformation.apply(shape)\n            shapes.append(shape)\n        return Group(shapes)\n\nclass Cycle(Transformation):\n    \"\"\"\n    Rotates the given shape repeatedly and combines all the resulting\n    shapes.\n\n    The cycle function is very amazing transformation and it creates\n    surprising patterns.\n\n    Parameters:\n        n:\n            The number of times to rotate. This also determines the\n            angle of each rotation, which will be 360/n.\n\n        anchor:\n            The anchor point for the rotation. Defaults to (0, 0) when\n            not specified.\n\n        s:\n            Optional scale factor to scale the shape for each rotation.\n            This can be used to grow or shrink the shape while rotating.\n\n        angle:\n            Optional angle of rotation. Defaults to 360/n when not\n            specified,\n    Examples:\n\n    Cycle a line:\n\n        >>> shape = Line() | Cycle()\n        >>> show(shape)\n\n    Cycle a square:\n\n        >>> shape = Rectangle() | Cycle()\n        >>> show(shape)\n\n    Cycle a rectangle:\n\n        >>> shape = Rectangle(width=200, height=100) | Cycle()\n        >>> show(shape)\n\n    Cycle an ellipse:\n\n        >>> e = scale(Circle(), sx=1, sy=0.5)\n        >>> show(e | Cycle())\n\n    Create a spiral with shirnking squares:\n\n        >>> shape = Rectangle(width=300, height=300) | cycle(n=72, s=0.92)\n        >>> show(shape)\n    \"\"\"\n    def __init__(self, n=18, anchor=Point(x=0, y=0), s=None, angle=None):\n        self.n = n\n        self.angle = angle if angle is not None else 360/n\n        self.anchor = anchor\n        self.s = s\n\n    def apply(self, shape):\n        shapes = [shape | Rotate(angle=i*self.angle, anchor=self.anchor) for i in range(self.n)]\n        if self.s is not None:\n            shapes = [shape_ | Scale(sx=self.s**i) for i, shape_ in enumerate(shapes)]\n        return Group(shapes)\n\ndef show(*shapes):\n    \"\"\"Shows the given shapes.\n\n    It also adds a border to the canvas and axis at the origin with\n    a light color as a reference.\n\n    Parameters:\n\n        shapes:\n            The shapes to show.\n\n    Examples:\n\n    Show a circle:\n\n        >>> show(circle())\n\n    Show a circle and square.\n\n        >>> c = circle()\n        >>> s = rect()\n        >>> show(c, s)\n    \"\"\"\n    markers = [\n        Rectangle(width=300, height=300, stroke=\"#ddd\"),\n        Line(start=Point(x=-150, y=0), end=Point(x=150, y=0), stroke=\"#ddd\"),\n        Line(start=Point(x=0, y=-150), end=Point(x=0, y=150), stroke=\"#ddd\")\n    ]\n    shapes = markers + list(shapes)\n    img = SVG(shapes)\n\n    from IPython.display import display\n    display(img)\n\ndef circle(x=0, y=0, r=100, **kwargs):\n    \"\"\"Creates a circle with center at (x, y) and radius of r.\n\n    Examples:\n\n    Draw a circle.\n\n        c = circle()\n        show(c)\n\n    Draw a circle with radius 50.\n\n        c = circle(r=50)\n        show(c)\n\n    Draw a circle with center at (10, 20) and a radius of 50.\n\n        c = circle(x=10, y=20, r=50)\n        show(c)\n    \"\"\"\n    return Circle(center=Point(x=x, y=y), radius=r, **kwargs)\n\ndef rectangle(x=0, y=0, w=200, h=100, **kwargs):\n    \"\"\"Creates a rectangle with center at (x, y), a width of w and a height of h.\n\n    Examples:\n\n    Draw a rectangle.\n\n        r = rectangle()\n        show(r)\n\n    Draw a rectangle with width of 100 and height of 50.\n\n        r = rectangle(w=100, h=50)\n        show(r)\n\n    Draw a rectangle with center at (10, 20), a width of 100 and a height of 50.\n\n        r = rectangle(x=10, y=20, w=100, h=50)\n        show(r)\n    \"\"\"\n    return Rectangle(center=Point(x=x, y=y), width=w, height=h, **kwargs)\n\ndef ellipse(x=0, y=0, w=200, h=100, **kwargs):\n    \"\"\"Creates a ellipse with center at (x, y), a width of w and a height of h.\n\n    Examples:\n\n    Draw a ellipse.\n\n        r = ellipse()\n        show(r)\n\n    Draw a ellipse with width of 100 and height of 50.\n\n        r = ellipse(w=100, h=50)\n        show(r)\n\n    Draw a ellipse with center at (10, 20), a width of 100 and a height of 50.\n\n        r = ellipse(x=10, y=20, w=100, h=50)\n        show(r)\n    \"\"\"\n    return Ellipse(center=Point(x=x, y=y), width=w, height=h, **kwargs)\n\ndef line(x1=None, y1=None, x2=None, y2=None, **kwargs):\n    \"\"\"Creates a line from point (x1, y1) to point (x2, y2).\n\n    Examples:\n\n    Draw a line.\n\n        z = line()\n\n    Draw a line from (10, 20) to (100, 200)\n\n        z = line(x1=10, y1=20, x2=100, y2=200)\n    \"\"\"\n    if x1 is None and y1 is None and x2 is None and y2 is None:\n        x1, y1 = -100, 0\n        x2, y2 = 100, 0\n    else:\n        pairs = dict(x1=x1, y1=y1, x2=x2, y2=y2)\n        missing = [name for name, value in pairs.items() if value is None]\n        if missing:\n            raise Exception(\"missing arguments for line: \", \", \".join(missing))\n    return Line(start=Point(x1, y1), end=Point(x2, y2), **kwargs)"}, {"filename": "sketch.py", "contents": "from joy import Circle, Point, Group, Translate, Scale\n\n_shapes = []\n\ndef circle(cx, cy, d):\n    c = Circle(center=Point(cx, cy), radius=d/2)\n    _shapes.append(c)\n\ndef get_shape():\n    return Group(_shapes) | Translate(-150, -150) | Scale(sx=1, sy=-1)\n"}];